### This config file contains required core defaults that must be set, along with a handful of common optional settings.
### For a full list of available settings, see https://microsoft.github.io/graphrag/config/yaml/

### LLM settings ###
## There are a number of settings to tune the threading and token limits for LLM calls - check the docs.

encoding_model: cl100k_base # this needs to be matched to your model!

parallelization:
  stagger: 0.3
  # num_threads: 50

async_mode: threaded # or asyncio

embeddings:
  async_mode: threaded # or asyncio
  vector_store: 
    type: lancedb
    db_uri: '/app/graphrag-folder/output/lancedb'
    container_name: default
    overwrite: true
  llm:
    api_key: $GRAPHRAG_API_KEY
    type: azure_openai_embedding # or azure_openai_embedding
    model: ${GRAPHRAG_EMBEDDING_MODEL}
    api_base: ${GRAPHRAG_API_BASE}
    api_version: "${GRAPHRAG_EMBEDDING_API_VERSION}"
    # audience: "https://cognitiveservices.azure.com/.default"
    # organization: <organization_id>
    deployment_name: ${GRAPHRAG_EMBEDDING_DEPLOYMENT}
    retry_strategy: native
    max_retries: -1                   # set to -1 for dynamic retry logic (most optimal setting based on server response)
    tokens_per_minute: auto              # set to 0 to disable rate limiting
    requests_per_minute: auto            # set to 0 to disable rate limiting
    max_retries: 5
    max_retry_wait: 50      

models:
  default_chat_model:
    api_key: ${GRAPHRAG_API_KEY} # set this in the generated .env file
    type: azure_openai_chat # or azure_openai_chat
    model: ${GRAPHRAG_LLM_MODEL}
    model_supports_json: true # recommended if this is available for your model.
    # audience: "https://cognitiveservices.azure.com/.default"
    api_base: ${GRAPHRAG_API_BASE}
    api_version: "${GRAPHRAG_LLM_API_VERSION}"
    # organization: <organization_id>
    deployment_name: ${GRAPHRAG_LLM_DEPLOYMENT}
    retry_strategy: native
    max_retries: -1                   # set to -1 for dynamic retry logic (most optimal setting based on server response)
    tokens_per_minute: auto              # set to 0 to disable rate limiting
    requests_per_minute: auto            # set to 0 to disable rate limiting
    max_retries: 5
    max_retry_wait: 50      

  default_embedding_model:
      api_key: ${GRAPHRAG_API_KEY}
      type: azure_openai_embedding # or azure_openai_embedding
      model: ${GRAPHRAG_EMBEDDING_MODEL}
      api_base: ${GRAPHRAG_API_BASE}
      api_version: "${GRAPHRAG_EMBEDDING_API_VERSION}"
      # audience: "https://cognitiveservices.azure.com/.default"
      # organization: <organization_id>
      deployment_name: ${GRAPHRAG_EMBEDDING_DEPLOYMENT}
      retry_strategy: native
      max_retries: -1                   # set to -1 for dynamic retry logic (most optimal setting based on server response)
      tokens_per_minute: auto              # set to 0 to disable rate limiting
      requests_per_minute: auto            # set to 0 to disable rate limiting
      max_retries: 5
      max_retry_wait: 50      

### Input settings ###
input:
  type: file # or blob
  file_type: text # or csv
  base_dir: "/app/graphrag-folder/input"
  file_encoding: utf-8
  file_pattern: ".*\\.txt$$"

chunks:
  size: 1200
  overlap: 100
  group_by_columns: [id]

### Storage settings ###
## If blob storage is specified in the following four sections,
## connection_string and container_name must be provided

cache:
  type: file # one of [blob, cosmosdb, file]
  base_dir: "/app/graphrag-folder/cache"

reporting:
  type: file # or console, blob
  base_dir: "/app/graphrag-folder/logs"

output: # changed from storage
  type: file # one of [blob, cosmosdb, file]
  base_dir: "/app/graphrag-folder/output"


## only turn this on if running `graphrag index` with custom settings
## we normally use `graphrag update` with the defaults
update_index_storage:
  type: file # or blob
  base_dir: "/app/graphrag-folder/update_output"

### Workflow settings ###

skip_workflows: []

entity_extraction:
  prompt: "/app/graphrag-folder/prompts/entity_extraction.txt"
  entity_types: [organization,person,geo,event]
  max_gleanings: 1

summarize_descriptions:
  prompt: "/app/graphrag-folder/prompts/summarize_descriptions.txt"
  max_length: 500

claim_extraction:
  enabled: false
  prompt: "/app/graphrag-folder/prompts/claim_extraction.txt"
  description: "Any claims or facts that could be relevant to information discovery."
  max_gleanings: 1

community_reports:
  prompt: "/app/graphrag-folder/prompts/community_report.txt"
  max_length: 2000
  max_input_length: 8000

cluster_graph:
  max_cluster_size: 10

embed_graph:
  enabled: true # if true, will generate node2vec embeddings for nodes

umap:
  enabled: false # if true, will generate UMAP embeddings for nodes (embed_graph must also be enabled)

snapshots:
  graphml: true
  embeddings: true
  transient: false

### Query settings ###
## The prompt locations are required here, but each search method has a number of optional knobs that can be tuned.
## See the config docs: https://microsoft.github.io/graphrag/config/yaml/#query

local_search:
  prompt: "/app/graphrag-folder/prompts/local_search_system_prompt.txt"

global_search:
  map_prompt: "/app/graphrag-folder/prompts/global_search_map_system_prompt.txt"
  reduce_prompt: "/app/graphrag-folder/prompts/global_search_reduce_system_prompt.txt"
  knowledge_prompt: "/app/graphrag-folder/prompts/global_search_knowledge_system_prompt.txt"

drift_search:
  prompt: "/app/graphrag-folder/prompts/drift_search_system_prompt.txt"

basic_search:
  prompt: "/app/graphrag-folder/prompts/basic_search_system_prompt.txt"
